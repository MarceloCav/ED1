#include <stdlib.h>
#include <stdio.h>

struct no {
    int val;
    struct no* prox;
};

struct linkedlist {
    struct no* cabeca;
    int qtdade;
};

struct linkedlist* inicializar(){

        struct linkedlist* lista = (struct linkedlist*)malloc(sizeof(struct linkedlist));
    
    lista->qtdade = 0;
    
    lista->cabeça=NULL;
    
    return lista;
}

struct no* alocarNovoNo(int valor){
    
        struct no* novoNo = (struct no*)malloc(sizeof(struct no));
    
    novoNo->val=valor;
    
    novoNo->prox=NULL;
    
    return novoNo;

}

void inserirElementoNoFim(struct linkedlist* lista, int valor){

    if(lista->cabeca==0){
    
        lista->cabeca = alocarNovoNo(valor);
        lista->qtdade++;
    }
    
    else{
        struct no* e, * novoNo;
        
        novoNo = alocarNovoNo(valor);
        
        e=lista->cabeca;
        
        for (int i=0; i<lista->qtdade-1; i++){
        
            e=e->prox;
        }
        
        e->prox = novoNo;
        
        lista->qtdade++;
    }

}

void inserirElementoNoInicio(struct linkedlist* lista, int valor){

    if (lista->cabeca==0){
    
        lista->cabeca=alocarNovoNo(valor);
        
        lista->qtdade++;
    }
    else{
    
        struct no* e;
        
        e=lista->cabeca;
        
        lista->cabeca=alocarNovoNo(valor);
        
        lista->cabeca->prox=e;
        
        lista->qtdade++;
    }

}

void inserirElementoEmPosicao(struct linkedlist* lista, int valor, int posicao){
    
    if (posicao>=0 && posicao<=lista->qtdade){
    
               if (posicao==0){

                     if (lista->cabeca==0){

                  lista->cabeca=alocarNovoNo(valor);

                  lista->qtdade++;
              }
              else{

                 struct no* e;

                  e=lista->cabeca;

                  lista->cabeca=alocarNovoNo(valor);

                  lista->cabeca->prox=e;

                  lista->qtdade++;
              }
        }
        else if (posicao == lista->qtdade) {
            if(lista->cabeca==0){
    
        lista->cabeca = alocarNovoNo(valor);
        lista->qtdade++;
    }
    
    else{
        struct no* e, * novoNo;
        
        novoNo = alocarNovoNo(valor);
        
        e=lista->cabeca;
        
        for (int i=0; i<lista->qtdade-1; i++){
        
            e=e->prox;
        }
        
        e->prox = novoNo;
        
        lista->qtdade++;
    }
        }
        else {
            struct no* e1 = lista->cabeca;
            
            struct no* e2 = alocarNovoNo(valor);
            
            for (int i=0; i<posicao-1; i++){
            
                e1=e1->prox;
            }
            
            e2->prox=e1->prox;
            e1->prox=e2;
            lista->qtdade++;
        }
    }
}

int obterElementoEmPosicao(struct linkedlist* lista, int posicao){
    
    struct no* e=lista->cabeca;
    
    for(int i=0;i<posicao;i++){
    
        e=e->prox;
    }
    
    return e->val;
}

void removerElementoEmPosicao(struct linkedlist* lista, int posicao){

    if(posicao>=0 && posicao<lista->qtdade){
        struct no* e1, * e2, * e3;
        
        if(posicao==0){
            e1=lista->cabeca;
            
            lista->cabeca=lista->cabeca->prox;
            
            free(e1);
        }
        else if(posicao==1){
        
            e1=lista->cabeca->prox;
            
            e2=e1->prox;
            
            lista->cabeca->prox=e2;
            
            free(e1);
        }
        else{
            e1=lista->cabeca;
            
            for(int i=0;i<posicao-1;i++){
            
                e1=e1->prox;                
            }
            e2=e1->prox;
            
            e2=e2->prox;
            
            e3=e1->prox;
            
            e1->prox=e2;
            
            free(e3);
        }
        
        lista->qtdade--;
    }
    
}

void imprimirLista(struct linkedlist* lista) {
    //usamos o aux para percorrer a lista
    if (lista->cabeca != NULL) {
        struct no* aux = lista->cabeca;
        //navega partindo da cabeça até chegar NULL
        printf("[");
        do {
            printf("%d", aux->val);
            aux = aux->prox;
            if (aux != NULL) {
                printf(", ");
            }
        } while (aux != NULL);
        printf("]");
    }
    else {
        printf("A lista está vazia!");
    }
}
